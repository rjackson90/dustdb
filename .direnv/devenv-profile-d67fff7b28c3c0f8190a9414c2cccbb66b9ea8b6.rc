unset shellHook
PATH=${PATH:-}
nix_saved_PATH="$PATH"
XDG_DATA_DIRS=${XDG_DATA_DIRS:-}
nix_saved_XDG_DATA_DIRS="$XDG_DATA_DIRS"
BASH='/nix/store/lpfc1myy7zrfwypvzw56jz58s0c8msx9-bash-interactive-5.2-p15/bin/bash'
HOSTTYPE='aarch64'
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LINENO='76'
MACHTYPE='aarch64-apple-darwin22.5.0'
NIX_BUILD_CORES='8'
export NIX_BUILD_CORES
NIX_STORE='/nix/store'
export NIX_STORE
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='darwin22.5.0'
PATH='/path-not-set'
export PATH
PS4='+ '
builder='/nix/store/lpfc1myy7zrfwypvzw56jz58s0c8msx9-bash-interactive-5.2-p15/bin/bash'
export builder
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
name='devenv-shell'
export name
out='/Users/rich/dustdb/outputs/out'
export out
outputs='out'
shellHook='
# Remove all the unnecessary noise that is set by the build env
unset NIX_BUILD_TOP NIX_BUILD_CORES NIX_STORE
unset TEMP TEMPDIR TMP 
# $name variable is preserved to keep it compatible with pure shell https://github.com/sindresorhus/pure/blob/47c0c881f0e7cfdb5eaccd335f52ad17b897c060/pure.zsh#L235
unset builder out shellHook stdenv system
# Flakes stuff
unset dontAddDisableDepTrack outputs

# For `nix develop`. We get /noshell on Linux and /sbin/nologin on macOS.
if [[ "$SHELL" == "/noshell" || "$SHELL" == "/sbin/nologin" ]]; then
  export SHELL=/nix/store/lpfc1myy7zrfwypvzw56jz58s0c8msx9-bash-interactive-5.2-p15/bin/bash
fi

# https://github.com/numtide/devshell/issues/158
PATH=${PATH#/path-not-set:}

export DEVENV_PROFILE=/nix/store/8hi5jsrjb3sa9iisz963f9hl4h04a28q-devenv-profile

# add installed packages to PATH
export PATH="$DEVENV_PROFILE/bin:$PATH"

# prepend common compilation lookup paths
export PKG_CONFIG_PATH="$DEVENV_PROFILE/lib/pkgconfig:${PKG_CONFIG_PATH-}"
export LD_LIBRARY_PATH="$DEVENV_PROFILE/lib:${LD_LIBRARY_PATH-}"
export LIBRARY_PATH="$DEVENV_PROFILE/lib:${LIBRARY_PATH-}"
export C_INCLUDE_PATH="$DEVENV_PROFILE/include:${C_INCLUDE_PATH-}"

# these provide shell completions / default config options
export XDG_DATA_DIRS="$DEVENV_PROFILE/share:${XDG_DATA_DIRS-}"
export XDG_CONFIG_DIRS="$DEVENV_PROFILE/etc/xdg:${XDG_CONFIG_DIRS-}"

export CFLAGS='\''-iframework /nix/store/8hi5jsrjb3sa9iisz963f9hl4h04a28q-devenv-profile/Library/Frameworks'\''
export DEVENV_DOTFILE='\''/Users/rich/dustdb/.devenv'\''
export DEVENV_PROFILE='\''/nix/store/8hi5jsrjb3sa9iisz963f9hl4h04a28q-devenv-profile'\''
export DEVENV_ROOT='\''/Users/rich/dustdb'\''
export DEVENV_STATE='\''/Users/rich/dustdb/.devenv/state'\''
export RUSTDOCFLAGS='\''-L framework=/nix/store/8hi5jsrjb3sa9iisz963f9hl4h04a28q-devenv-profile/Library/Frameworks'\''
export RUSTFLAGS='\''-L framework=/nix/store/8hi5jsrjb3sa9iisz963f9hl4h04a28q-devenv-profile/Library/Frameworks'\''
export RUST_SRC_PATH='\''/nix/store/lq4y8cip8faifym1pmjn5chs3pdkbsia-rust-lib-src'\''

export PATH=/nix/store/12aywp9ngdxd2wrgam21lkwvk0djw433-pre-commit-3.3.3/bin:$PATH
if ! type -t git >/dev/null; then
  # This happens in pure shells, including lorri
  echo 1>&2 "WARNING: pre-commit-hooks.nix: git command not found; skipping installation."
elif ! /nix/store/pr1wzd22phjv7h0vbmfdjn382axlw760-git-2.41.0/bin/git rev-parse --git-dir &> /dev/null; then
  echo 1>&2 "WARNING: pre-commit-hooks.nix: .git not found; skipping installation."
else
  GIT_WC=`/nix/store/pr1wzd22phjv7h0vbmfdjn382axlw760-git-2.41.0/bin/git rev-parse --show-toplevel`

  # These update procedures compare before they write, to avoid
  # filesystem churn. This improves performance with watch tools like lorri
  # and prevents installation loops by via lorri.

  if ! readlink "${GIT_WC}/.pre-commit-config.yaml" >/dev/null \
    || [[ $(readlink "${GIT_WC}/.pre-commit-config.yaml") != /nix/store/i2z40s3fn4hh3wqwm9b23gf352mlf96y-pre-commit-config.json ]]; then
    echo 1>&2 "pre-commit-hooks.nix: updating $PWD repo"

    [ -L .pre-commit-config.yaml ] && unlink .pre-commit-config.yaml

    if [ -e "${GIT_WC}/.pre-commit-config.yaml" ]; then
      echo 1>&2 "pre-commit-hooks.nix: WARNING: Refusing to install because of pre-existing .pre-commit-config.yaml"
      echo 1>&2 "    1. Translate .pre-commit-config.yaml contents to the new syntax in your Nix file"
      echo 1>&2 "        see https://github.com/cachix/pre-commit-hooks.nix#getting-started"
      echo 1>&2 "    2. remove .pre-commit-config.yaml"
      echo 1>&2 "    3. add .pre-commit-config.yaml to .gitignore"
    else
      ln -fs /nix/store/i2z40s3fn4hh3wqwm9b23gf352mlf96y-pre-commit-config.json "${GIT_WC}/.pre-commit-config.yaml"
      # Remove any previously installed hooks (since pre-commit itself has no convergent design)
      hooks="pre-commit pre-merge-commit pre-push prepare-commit-msg commit-msg post-checkout post-commit"
      for hook in $hooks; do
        pre-commit uninstall -t $hook
      done
      /nix/store/pr1wzd22phjv7h0vbmfdjn382axlw760-git-2.41.0/bin/git config --local core.hooksPath ""
      # Add hooks for configured stages (only) ...
      if [ ! -z "commit" ]; then
        for stage in commit; do
          if [[ "$stage" == "manual" ]]; then
            continue
          fi
          case $stage in
            # if you amend these switches please also review $hooks above
            commit | merge-commit | push)
              stage="pre-"$stage
              pre-commit install -t $stage
              ;;
            prepare-commit-msg | commit-msg | post-checkout | post-commit)
              pre-commit install -t $stage
              ;;
            *)
              echo 1>&2 "ERROR: pre-commit-hooks.nix: either $stage is not a valid stage or pre-commit-hooks.nix doesn'\''t yet support it."
              exit 1
              ;;
          esac
        done
      # ... or default '\''pre-commit'\'' hook
      else
        pre-commit install
      fi
      /nix/store/pr1wzd22phjv7h0vbmfdjn382axlw760-git-2.41.0/bin/git config --local core.hooksPath "$(/nix/store/pr1wzd22phjv7h0vbmfdjn382axlw760-git-2.41.0/bin/git rev-parse --git-common-dir)/hooks"
    fi
  fi
fi


export CARGO_INSTALL_ROOT=$('\''/nix/store/3b26b40w18mlr1cmx848pfq2cdisvn8v-coreutils-9.3/bin/realpath'\'' '\''--no-symlinks'\'' '\''/Users/rich/dustdb/.devenv/state/cargo-install'\'')
export PATH="$PATH:$CARGO_INSTALL_ROOT/bin"

echo "âœ¨ devenv 0.6.2 is out of date. Please update to 0.6.3: https://devenv.sh/getting-started/#installation" >&2


export PS1="\[\e[0;34m\](devenv)\[\e[0m\] ${PS1-}"

# set path to locales on non-NixOS Linux hosts


# note what environments are active, but make sure we don'\''t repeat them
if [[ ! "${DIRENV_ACTIVE-}" =~ (^|:)"$PWD"(:|$) ]]; then
  export DIRENV_ACTIVE="$PWD:${DIRENV_ACTIVE-}"
fi

# devenv helper
if [ ! type -p direnv &>/dev/null && -f .envrc ]; then
  echo "You have .envrc but direnv command is not installed."
  echo "Please install direnv: https://direnv.net/docs/installation.html"
fi

mkdir -p .devenv
rm -f .devenv/profile
ln -s /nix/store/8hi5jsrjb3sa9iisz963f9hl4h04a28q-devenv-profile .devenv/profile

'
export shellHook
stdenv='/nix/store/jhks7ikbwavh79ih4rwskjnf2giqpb0j-naked-stdenv'
export stdenv
system='aarch64-darwin'
export system
runHook ()
{
 
    eval "$shellHook";
    unset runHook
}
PATH="$PATH:$nix_saved_PATH"
XDG_DATA_DIRS="$XDG_DATA_DIRS:$nix_saved_XDG_DATA_DIRS"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "$shellHook"
